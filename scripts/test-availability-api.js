/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
 * –ó–∞–ø—É—Å–∫: node scripts/test-availability-api.js
 */

const axios = require("axios");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL =
  process.env.EXPO_PUBLIC_API_URL ||
  "https://api-production-4ce8.up.railway.app";
const API_PREFIX = "/api";

// –°–æ–∑–¥–∞–µ–º axios instance
const apiClient = axios.create({
  baseURL: `${API_BASE_URL}${API_PREFIX}`,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
async function testAvailability(restaurantId, date) {
  console.log(
    `\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ${restaurantId} –Ω–∞ –¥–∞—Ç—É ${date}`
  );

  try {
    const startTime = Date.now();
    const response = await apiClient.get(
      `/restaurant/restaurants/${restaurantId}/availability/?date=${date}`
    );
    const endTime = Date.now();

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ ${endTime - startTime}ms:`);
    console.log("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", {
      status: response.status,
      statusText: response.statusText,
      dataStructure: typeof response.data,
    });

    const data = response.data.data || response.data;

    if (data && typeof data === "object") {
      console.log("üìã –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:");
      console.log(`   ‚Ä¢ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: ${data.restaurant_id}`);
      console.log(`   ‚Ä¢ –î–∞—Ç–∞: ${data.date}`);
      console.log(`   ‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${data.day_of_week}`);
      console.log(
        `   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${data.opening_time} - ${data.closing_time}`
      );
      console.log(
        `   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${data.available_slots?.length || 0}`
      );

      if (data.available_slots && Array.isArray(data.available_slots)) {
        console.log(
          `   ‚Ä¢ –°–ª–æ—Ç—ã: ${data.available_slots.slice(0, 5).join(", ")}${
            data.available_slots.length > 5 ? "..." : ""
          }`
        );
      }
    } else {
      console.log("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", data);
    }

    return data;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:`);
    console.log(`   ‚Ä¢ –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || "N/A"}`);
    console.log(`   ‚Ä¢ HTTP —Å—Ç–∞—Ç—É—Å: ${error.response?.status || "N/A"}`);
    console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);

    if (error.response?.data) {
      console.log(`   ‚Ä¢ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, error.response.data);
    }

    // –¢–µ–ø–µ—Ä—å API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 —Å –ø—É—Å—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ 400
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 400, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    if (error.response?.status === 400) {
      console.log(
        `‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 400 - –≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ API`
      );
    }

    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
async function getRestaurants() {
  console.log("\nüè™ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤...");

  try {
    const response = await apiClient.get(
      "/restaurant/restaurants/?page_size=5"
    );
    const data = response.data;

    if (data.results && Array.isArray(data.results)) {
      console.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.results.length} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (–∏–∑ ${data.count} –≤—Å–µ–≥–æ):`
      );
      return data.results.map((restaurant) => ({
        id: restaurant.id,
        name: restaurant.name,
        address: restaurant.address,
      }));
    } else {
      console.log("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", data);
      return [];
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generateTestDates() {
  const dates = [];
  const today = new Date();

  for (let i = 0; i < 3; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    dates.push(date.toISOString().split("T")[0]);
  }

  return dates;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤");
  console.log(`üì° –ë–∞–∑–æ–≤—ã–π URL: ${API_BASE_URL}${API_PREFIX}`);

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
  const restaurants = await getRestaurants();

  if (restaurants.length === 0) {
    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testDates = generateTestDates();
  console.log(`üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –¥–∞—Ç–∞—Ö: ${testDates.join(", ")}`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–≤—ã–µ 2 –¥–∞—Ç—ã
  const testsToRun = [];

  for (let i = 0; i < Math.min(2, restaurants.length); i++) {
    for (let j = 0; j < Math.min(2, testDates.length); j++) {
      testsToRun.push({
        restaurant: restaurants[i],
        date: testDates[j],
      });
    }
  }

  console.log(`\nüéØ –ó–∞–ø—É—Å–∫–∞–µ–º ${testsToRun.length} —Ç–µ—Å—Ç–æ–≤...`);

  for (const test of testsToRun) {
    console.log(`\n${"=".repeat(60)}`);
    console.log(
      `üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: ${test.restaurant.name} (ID: ${test.restaurant.id})`
    );
    console.log(`üìç –ê–¥—Ä–µ—Å: ${test.restaurant.address}`);
    console.log(`üìÖ –î–∞—Ç–∞: ${test.date}`);

    await testAvailability(test.restaurant.id, test.date);

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 500));
  }

  console.log(`\n${"=".repeat(60)}`);
  console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

  // –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
  console.log("\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:");
  console.log(
    `   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: ${Math.min(2, restaurants.length)}`
  );
  console.log(`   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–∞—Ç: ${Math.min(2, testDates.length)}`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testsToRun.length}`);
  console.log(
    `   ‚Ä¢ API endpoint: GET /restaurant/restaurants/{id}/availability/?date=YYYY-MM-DD`
  );
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runTests().catch((error) => {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  });
}

module.exports = {
  testAvailability,
  getRestaurants,
  runTests,
};

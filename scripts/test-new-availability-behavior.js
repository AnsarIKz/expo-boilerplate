/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
 * –¢–µ–ø–µ—Ä—å API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å –ø—É—Å—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ 400 –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 * –ó–∞–ø—É—Å–∫: node scripts/test-new-availability-behavior.js
 */

const axios = require("axios");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL =
  process.env.EXPO_PUBLIC_API_URL ||
  "https://api-production-4ce8.up.railway.app";
const API_PREFIX = "/api";

// –°–æ–∑–¥–∞–µ–º axios instance
const apiClient = axios.create({
  baseURL: `${API_BASE_URL}${API_PREFIX}`,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
async function testAvailability(
  restaurantId,
  date,
  expectedBehavior = "unknown"
) {
  console.log(
    `\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ${restaurantId} –Ω–∞ –¥–∞—Ç—É ${date}`
  );
  console.log(`   –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: ${expectedBehavior}`);

  try {
    const startTime = Date.now();
    const response = await apiClient.get(
      `/restaurant/restaurants/${restaurantId}/availability/?date=${date}`
    );
    const endTime = Date.now();

    console.log(
      `‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ${response.status} –∑–∞ ${endTime - startTime}ms`
    );

    const data = response.data.data || response.data;

    if (data && typeof data === "object") {
      console.log("üìã –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:");
      console.log(`   ‚Ä¢ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: ${data.restaurant_id}`);
      console.log(`   ‚Ä¢ –î–∞—Ç–∞: ${data.date}`);
      console.log(`   ‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${data.day_of_week}`);
      console.log(
        `   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${data.opening_time} - ${data.closing_time}`
      );
      console.log(
        `   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${data.available_slots?.length || 0}`
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (data.available_slots?.length > 0) {
        console.log("üü¢ –°—Ç–∞—Ç—É—Å: –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã");
        console.log(
          `   ‚Ä¢ –ü–µ—Ä–≤—ã–µ —Å–ª–æ—Ç—ã: ${data.available_slots.slice(0, 5).join(", ")}`
        );
      } else if (
        Array.isArray(data.available_slots) &&
        data.available_slots.length === 0
      ) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ª–æ—Ç–æ–≤
        const hasWorkingHours =
          data.opening_time &&
          data.closing_time &&
          data.opening_time !== data.closing_time;

        if (!hasWorkingHours) {
          console.log("üî¥ –°—Ç–∞—Ç—É—Å: –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å");
        } else {
          console.log("üü° –°—Ç–∞—Ç—É—Å: –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã");
        }
      } else {
        console.log("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ available_slots");
      }

      return {
        success: true,
        data,
        hasSlots: data.available_slots?.length > 0,
        isClosed:
          !data.opening_time ||
          !data.closing_time ||
          data.opening_time === data.closing_time,
      };
    } else {
      console.log("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", data);
      return { success: false, error: "Invalid data structure" };
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:`);
    console.log(`   ‚Ä¢ HTTP —Å—Ç–∞—Ç—É—Å: ${error.response?.status || "N/A"}`);
    console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);

    if (error.response?.data) {
      console.log(`   ‚Ä¢ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, error.response.data);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    if (error.response?.status === 400) {
      console.log("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 400!");
      console.log("   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ API –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω");
      console.log("   –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º");
    }

    return {
      success: false,
      error: error.message,
      status: error.response?.status,
      serverResponse: error.response?.data,
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
async function getRestaurant() {
  console.log("\nüè™ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ...");

  try {
    const response = await apiClient.get(
      "/restaurant/restaurants/?page_size=1"
    );
    const data = response.data;

    if (
      data.results &&
      Array.isArray(data.results) &&
      data.results.length > 0
    ) {
      const restaurant = data.results[0];
      console.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω: ${restaurant.name} (ID: ${restaurant.id})`
      );
      return restaurant;
    } else {
      console.log("‚ö†Ô∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return null;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generateTestDates() {
  const dates = [];
  const today = new Date();

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
  for (let i = 0; i < 14; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);

    const dayNames = [
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
    ];
    const dayOfWeek = date.getDay();

    dates.push({
      date: date.toISOString().split("T")[0],
      dayName: dayNames[dayOfWeek],
      dayOfWeek,
      isWeekend: dayOfWeek === 0 || dayOfWeek === 6,
    });
  }

  return dates;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runNewBehaviorTests() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤");
  console.log("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å –ø—É—Å—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏");
  console.log(`üì° –ë–∞–∑–æ–≤—ã–π URL: ${API_BASE_URL}${API_PREFIX}`);

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω
  const restaurant = await getRestaurant();

  if (!restaurant) {
    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testDates = generateTestDates();
  console.log(`üìÖ –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ${testDates.length} –¥–∞—Ç...`);

  const results = {
    success: 0,
    errors: 0,
    closed: 0,
    hasSlots: 0,
    emptySlots: 0,
    status400: 0,
  };

  console.log(`\nüéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...`);

  for (const dateInfo of testDates) {
    console.log(`\n${"=".repeat(80)}`);
    console.log(`üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${dateInfo.date} (${dateInfo.dayName})`);

    const result = await testAvailability(
      restaurant.id,
      dateInfo.date,
      dateInfo.isWeekend ? "–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç" : "–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"
    );

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (result.success) {
      results.success++;
      if (result.isClosed) {
        results.closed++;
      } else if (result.hasSlots) {
        results.hasSlots++;
      } else {
        results.emptySlots++;
      }
    } else {
      results.errors++;
      if (result.status === 400) {
        results.status400++;
      }
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 300));
  }

  console.log(`\n${"=".repeat(80)}`);
  console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:");
  console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.success}`);
  console.log(`   ‚Ä¢ –û—à–∏–±–æ–∫: ${results.errors}`);
  console.log(`   ‚Ä¢ –î–Ω–µ–π –∫–æ–≥–¥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç: ${results.closed}`);
  console.log(`   ‚Ä¢ –î–Ω–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏: ${results.hasSlots}`);
  console.log(
    `   ‚Ä¢ –î–Ω–µ–π —Å –ø—É—Å—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ (–≤—Å–µ –∑–∞–Ω—è—Ç—ã): ${results.emptySlots}`
  );
  console.log(`   ‚Ä¢ –û—à–∏–±–æ–∫ 400 (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ): ${results.status400}`);

  // –í—ã–≤–æ–¥—ã
  console.log("\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è API:");

  if (results.status400 > 0) {
    console.log("üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 400!");
    console.log("   –í–æ–∑–º–æ–∂–Ω–æ, API –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è");
  } else {
    console.log("‚úÖ –û—Ç–ª–∏—á–Ω–æ! API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 200");
    console.log("   –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤");
  }

  if (results.success > 0) {
    console.log(
      `‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ ${results.success} –∏–∑ ${testDates.length} —Ç–µ—Å—Ç–æ–≤`
    );
  }

  const successRate = ((results.success / testDates.length) * 100).toFixed(1);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successRate}%`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runNewBehaviorTests().catch((error) => {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  });
}

module.exports = {
  testAvailability,
  runNewBehaviorTests,
};

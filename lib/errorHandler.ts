interface ErrorInfo {
  componentStack?: string;
  errorBoundary?: string;
  errorBoundaryStack?: string;
}

class ErrorHandler {
  private isInitialized = false;

  init() {
    if (this.isInitialized) return;

    this.isInitialized = true;

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.error —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ UI
    const originalConsoleError = console.error;
    console.error = (...args: any[]) => {
      this.logError("Console Error", args.join(" "));
      // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º originalConsoleError
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è web)
    if (typeof window !== "undefined" && window.addEventListener) {
      window.addEventListener("unhandledrejection", (event) => {
        this.logError("Unhandled Promise Rejection", event.reason);
        event.preventDefault();
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è web)
    if (typeof window !== "undefined" && window.addEventListener) {
      window.addEventListener("error", (event) => {
        this.logError("Global Error", event.error);
        event.preventDefault();
      });
    }
  }

  logError(type: string, error: any, errorInfo?: ErrorInfo) {
    // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log("üö® [ERROR]", type, error);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
  logManualError(error: any, context?: string) {
    this.logError(`Manual Error${context ? ` (${context})` : ""}`, error);
  }
}

export const errorHandler = new ErrorHandler();

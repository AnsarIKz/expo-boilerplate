import {
  SendLoginCodeRequest,
  smsAuthApi,
  VerifyLoginCodeRequest,
} from "@/lib/api/smsAuth";
import { useToast } from "@/providers/ToastProvider";
import { useAuthStore } from "@/stores/authStore";
import { useMutation, useQueryClient } from "@tanstack/react-query";

// –•—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞
export function useSendLoginCode() {
  const { showError, showSuccess } = useToast();

  return useMutation({
    mutationFn: (data: SendLoginCodeRequest) => {
      console.log("üîÑ useSendLoginCode mutation started:", {
        phoneNumber: data.phone_number,
        timestamp: new Date().toISOString(),
      });
      return smsAuthApi.sendLoginCode(data);
    },
    retry: false,
    onSuccess: (data, variables) => {
      console.log("‚úÖ useSendLoginCode SUCCESS:", {
        phoneNumber: variables.phone_number,
        response: data,
        timestamp: new Date().toISOString(),
      });

      showSuccess(
        "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        data.data?.message || data.message || "SMS –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
      );
    },
    onError: (error: any, variables) => {
      console.error("‚ùå useSendLoginCode ERROR:", {
        phoneNumber: variables.phone_number,
        error: error,
        timestamp: new Date().toISOString(),
      });

      let errorMessage = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞";

      if (error.code === "ERR_NETWORK" || error.message === "Network Error") {
        errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";
      } else if (error.response?.status === 404) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω";
      } else if (error.response?.status === 429) {
        errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      } else if (error.response?.status === 400) {
        errorMessage =
          error.response?.data?.message || "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
      } else if (error.response?.status === 500) {
        errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }

      showError("–û—à–∏–±–∫–∞", errorMessage);
    },
  });
}

// –•—É–∫ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMS –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥–∞
export function useVerifyLoginCode() {
  const { showError, showSuccess } = useToast();
  const queryClient = useQueryClient();
  const { login } = useAuthStore();

  return useMutation({
    mutationFn: (data: VerifyLoginCodeRequest) => {
      console.log("üîÑ useVerifyLoginCode mutation started:", {
        phoneNumber: data.phone_number,
        timestamp: new Date().toISOString(),
      });
      return smsAuthApi.verifyLoginCode(data);
    },
    retry: false,
    onSuccess: (data, variables) => {
      const responseData = data.data;

      console.log("‚úÖ useVerifyLoginCode SUCCESS:", {
        phoneNumber: variables.phone_number,
        user: responseData.user,
        hasToken: !!responseData.access_token,
        timestamp: new Date().toISOString(),
      });

      showSuccess(
        "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${
          responseData.user.firstName || responseData.user.first_name
        }!`
      );

      // –ê–≤—Ç–æ –ª–æ–≥–∏–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      login({
        accessToken: responseData.access_token,
        refreshToken: responseData.refresh_token,
        user: responseData.user,
      });

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      queryClient.invalidateQueries({ queryKey: ["session"] });
    },
    onError: (error: any, variables) => {
      console.error("‚ùå useVerifyLoginCode ERROR:", {
        phoneNumber: variables.phone_number,
        error: error,
        timestamp: new Date().toISOString(),
      });

      let errorMessage = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞";

      if (error.code === "ERR_NETWORK" || error.message === "Network Error") {
        errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";
      } else if (error.response?.status === 400) {
        errorMessage = error.response?.data?.message || "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥";
      } else if (error.response?.status === 404) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      } else if (error.response?.status === 429) {
        errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      } else if (error.response?.status === 500) {
        errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }

      showError("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", errorMessage);
    },
  });
}
